/*
 * sseq microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* block meta information */
char receiver_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t receiver_config[] = {
        { NULL },
};

/* declaration port block ports */
ubx_port_t receiver_ports[] = {
        { NULL },
};

/* declare a struct port_cache */
struct receiver_port_cache {
        ubx_port_t* tstats;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct receiver_port_cache *pc)
{
        pc->tstats = ubx_port_get(b, "tstats");
}


// /* for each port type, declare convenience functions to read/write from ports */
// def_write_fun(write_tstats, struct ptrig_tstat)

/* block operation forward declarations */
int receiver_init(ubx_block_t *b);
int receiver_start(ubx_block_t *b);
void receiver_stop(ubx_block_t *b);
void receiver_cleanup(ubx_block_t *b);
void receiver_step(ubx_block_t *b);


/* put everything together */
ubx_block_t receiver_block = {
        .name = "receiver",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = receiver_meta,
        .configs = receiver_config,
        .ports = receiver_ports,

        /* ops */
        .init = receiver_init,
        .start = receiver_start,
        .stop = receiver_stop,
        .cleanup = receiver_cleanup,
        .step = receiver_step,
};


/* receiver module init and cleanup functions */
int receiver_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;

        if(ubx_block_register(ni, &receiver_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void receiver_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        ubx_block_unregister(ni, "receiver");
}

